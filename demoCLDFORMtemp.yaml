AWSTemplateFormatVersion: "2010-09-09"
Description: Sample template for s3 object trigger
Resources:

  CreateS3IAMROLE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
          Description: The IAM Role which has full access to s3 buckets
          RoleName: S3FullAccessRole
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonS3FullAccess
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


  NowCreateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cldformnfun
      Code:
        S3Bucket: mybucket4pyprgm
        S3Key: lambda_function2.zip
      Description: This Function is called whenever an object lands on s3, to copy the object to another bucket
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CreateS3IAMROLE.Arn
      Runtime: python3.9

  DeclareS3sourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mybucket4pyprgm
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt NowCreateLambdaFunction.Arn

  DeclareDestinationS3Bkt:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mybucket4pyprgm-destiny

  AllowS3ToCallLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NowCreateLambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub
        - 'arn:aws:s3:::${sourceS3bucketName}'
        - sourceS3bucketName: mybucket4pyprgm









